@font-face {
  font-family: "SFProText";
  src: url("../fonts/SFProText-Semibold.woff2") format("woff2");
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
/*
 * Copyright (c) 2024 Javid Gulmaliyev
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
 * SCSS function responsive-value.
 * It is intended to handle responsive CSS property values without using media queries
 *
 * @access public
 * @author Javid Gulmaliyev
 *
 * @param {number} $start-value - The initial value of the property. Accepts only numeric values without units. Cannot be equal to $end-value.
 * @param {number} $end-value - The final value of the property. Accepts only numeric values without units. Cannot be equal to $start-value.
 * @param {number} $start-breakpoint - The initial breakpoint. At this breakpoint, the property value will be equal to $start-value. Accepts only positive numeric values without units. Cannot be less than or equal to $end-breakpoint.
 * @param {number} $end-breakpoint - The final breakpoint. At this breakpoint, the property value will be equal to $end-value. Accepts only positive numeric values or 0 (zero) without units. Cannot be greater than or equal to $start-breakpoint.
 * @param {string} $behavior - Accepts 4 values:
 *   - "not-fixed": The $start-value and $end-value properties are not fixed before and after breakpoints.
 *   - "fixed-both": The $start-value and $end-value properties are strictly fixed before and after breakpoints.
 *   - "fixed-start-value": At this value, $start-value is strictly fixed before $start-breakpoint. Default value.
 *   - "fixed-end-value": At this value, $end-value is strictly fixed after $end-breakpoint.
 * @param {string} $unit - CSS unit for numeric values. Default is "px". When changing the unit, $start-value, $end-value, $start-breakpoint, and $end-breakpoint should be written in the format of the specified unit.
 *
 * @return {string} One of the CSS mathematical functions: min(), max(), clamp().
 *
 * @example
 * .element {
 *     font-size: responsive-value(2, 1, 48, 23.4375, "fixed-both", "rem");
 *     padding: responsive-value(20, 10, 768, 375, "fixed-end-value", "px");
 *     margin-bottom: responsive-value(30, 15, 1440, 280);
 * }
 *
 * @throw {error} If $start-value, $end-value, $start-breakpoint, or $end-breakpoint are not numeric or have units.
 * @throw {error} If $start-value and $end-value are equal.
 * @throw {error} If $start-breakpoint is less than or equal to zero.
 * @throw {error} If $end-breakpoint is a negative number.
 * @throw {error} If $start-breakpoint is less than $end-breakpoint.
 * @throw {error} If $start-breakpoint is equal to $end-breakpoint.
 * @throw {error} If the value of $behavior is incorrect.
 */
* {
  padding: 0;
  margin: 0;
  border: none;
}
*, *::before, *::after {
  box-sizing: border-box;
}

:focus,
:active {
  outline: none;
}

html,
body {
  -moz-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  inline-size: 100%;
  block-size: 100%;
  font-size: 16px;
  line-height: 1;
}

html {
  scroll-behavior: smooth;
}

a {
  color: inherit;
}
a, a:visited, a:hover {
  text-decoration: none;
}
a:focus, a:active {
  outline: none;
}

button {
  font-family: inherit;
  font-weight: inherit;
  font-style: inherit;
  font-size: inherit;
  line-height: inherit;
  color: inherit;
  background: none;
  cursor: pointer;
}
button:disabled {
  cursor: default;
}
button:focus-visible {
  outline: 2px solid var(--outline-color, currentColor);
  outline-offset: 2px;
}
button::-moz-focus-inner {
  padding: 0;
  border: none;
}
@media (hover: hover) {
  button:hover {
    outline: none;
  }
}
@media (hover: none) {
  button:active {
    outline: none;
    opacity: 0.5;
  }
}

ul,
ul li,
ol,
ol li {
  list-style: none;
}

img {
  vertical-align: top;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: 400;
}

svg {
  fill: currentColor;
  stroke: currentColor;
}